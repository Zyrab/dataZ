{
  "title": "Game using Svg shapes and procedural generation",
  "date":"18.03.2025",
  "intro": "Well who doesn't want to cerate a game? so do i and i made a game",
  "sections": [
    {
      "title": "The Initial Idea",
      "content": [
         {
          "p": "Two weeks ago, I decided to change the Home page. I have space as the theme, So the first idea was to add an interactive spaceship or a 3D planet. WebGL seemed like the right tool, but learning it would take time. Using a library was an option, but writing everything from scratch felt more rewarding."
        },
        {
          "p": "In the end, a mini-game was built instead. In hindsight, WebGL might have been the better choice, but the experience of crafting a game from the ground up was worth it."
        }
      ]
    },
    {
      "title": "Procedural Generation",
      "content": [
        {
          "p": "The plan was to generate all the objects in the game procedurally. That is, objects would appear according to pre-written rules. For example, I wrote the explosion effect like this:"
        },
        {
          "code": "const TWO_PI = Math.PI * 2;\n\n// Function to create an explosion effect at (x, y)\nconst createExplosion = (x, y, particleCount, maxSize = 4) => {\n\tconst particles = [];\n\n\t// Generate particles with random properties\n\tfor (let i = 0; i < particleCount; i++) {\n\t\tconst angle = Math.random() * TWO_PI; // Random direction\n\t\tconst speed = Math.random() * 1 + 0.7; // Random speed between 0.7 and 1.7\n\n\t\tparticles.push({\n\t\t\tx,\n\t\t\ty,\n\t\t\tdx: Math.cos(angle) * speed, // Horizontal movement\n\t\t\tdy: Math.sin(angle) * speed, // Vertical movement\n\t\t\tlife: Math.random() * particleCount * 2, // Lifespan\n\t\t\tsize: Math.random() * maxSize + 1, // Random size\n\t\t\topacity: 1, // Initial opacity\n\t\t});\n\t}\n\n\treturn {\n\t\tparticles,\n\n\t\t// Update function to animate particles\n\t\tupdate(ctx, deltaTime) {\n\t\t\tthis.particles.forEach((particle) => {\n\t\t\t\t// Move particle\n\t\t\t\tparticle.x += particle.dx * deltaTime;\n\t\t\t\tparticle.y += particle.dy * deltaTime;\n\t\t\t\tparticle.life--; // Reduce lifespan\n\n\t\t\t\t// Shrink particle slightly over time\n\t\t\t\tif (particle.size > 1) {\n\t\t\t\t\tparticle.size -= 0.01;\n\t\t\t\t}\n\n\t\t\t\t// Fade out over time\n\t\t\t\tparticle.opacity = particle.life / 90;\n\n\t\t\t\t// Draw particle\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.arc(particle.x, particle.y, particle.size, 0, TWO_PI);\n\t\t\t\tctx.fillStyle = `rgba(204, 204, 204, ${particle.opacity})`;\n\t\t\t\tctx.fill();\n\t\t\t});\n\n\t\t\t// Remove dead particles\n\t\t\tthis.particles = this.particles.filter((p) => p.life > 0);\n\n\t\t\t// Return true if particles are still active, false if all are gone\n\t\t\treturn this.particles.length > 0;\n\t\t},\n\t};\n};",
          "syntax": "js"
        },
        {
          "p": "The idea is that circles are generated, and they spread outward from the center. As they move, they shrink, fade, and eventually disappear. I made a few more objects like this, but then I realized that drawing everything this way wasn’t the best approach."
        },
        {
          "p": "The problem is that when you draw many objects on the canvas without caching shapes, each new animation frame recalculates and redraws them from scratch. This means that if you draw 100 circles, and the frame rate is 60 FPS, you get 6,000 calculations per second. I ran a small experiment, trying to continuously draw around 200,000 circles, and the FPS dropped significantly. Other than this, I didn’t notice any issues with animations and gameplay, but on lower-end devices, this could be an issue. So, generating that many objects procedurally wasn’t a good idea."
        }
      ]
    },
    {
      "title": "Working with SVG Graphics",
      "content": [
        {
          "p": "Next step was to import complex graphics. I like working with SVG, and since the canvas has similar drawing methods, it was chosen. After a few hours of research, playing around with GPT-generated tables, and manually adjusting every SVG point, I figured out a method."
        },
        {
          "p": "It turns out you can pass the d attribute of an SVG path to the canvas Path2D() object, and it will draw exactly like the original SVG. However, you can’t directly apply colors, outlines, and other properties—you have to handle them separately."
        },
        {
          "p": "So, I went ahead and wrote an SVG-to-Canvas converter. This function allows you to pass any SVG file, and it will extract attributes like width, height, viewBox, paths, circles, and rectangles. Then, it returns an object with the necessary data."
        },
        {"p":"Here’s an example of the output:"},
        {
          "code": "const Shapes = [\n\t[\n\t\t{\n\t\t\tsvg: {\n\t\t\t\twidth: \"10\",\n\t\t\t\theight: \"10\",\n\t\t\t\tviewBox: \"0 0 10 10\",\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tpath: \"M8 0.5L5 0L2 1L0 4V6.66667L2 9.5L6 10L8.5 9L10 6V3L8 0.5Z\",\n\t\t\tfill: \"#5F5959\",\n\t\t},\n\t\t{\n\t\t\tcircle: {\n\t\t\t\tcx: 3,\n\t\t\t\tcy: 3,\n\t\t\t\tr: 1,\n\t\t\t},\n\t\t\tfill: \"#2F2B2B\",\n\t\t},\n\t\t{\n\t\t\tcircle: {\n\t\t\t\tcx: 8,\n\t\t\t\tcy: 4,\n\t\t\t\tr: 1,\n\t\t\t},\n\t\t\tfill: \"#413F3F\",\n\t\t},\n\t\t{\n\t\t\tcircle: {\n\t\t\t\tcx: 5.5,\n\t\t\t\tcy: 1.5,\n\t\t\t\tr: 0.5,\n\t\t\t},\n\t\t\tfill: \"#1B1616\",\n\t\t}\n\t]\n];",
          "syntax": "js"
        },
        {"p":"Canvas also has built-in methods for drawing shadows, blurs, and gradients. However, using blur in animations is not a good idea because it consumes a lot of resources."}
      ]
    },
    {
      "title": "Drawing and Animating SVGs",
      "content": [
        {
          "p":"Once I had my SVG converter, drawing these shapes on canvas became much easier. Now, I had to go through two iterations:"
        },
        {
          "p":"First, I created Path2D objects from the SVG paths."
        },
        {
          "code": "const cacheShapes = (shapes) => {\n\tconst shapes = [];\n\tshapes.forEach((p) => {\n\t\tlet path = null;\n\t\t// Simplified shape creation, only handling path and circle\n\t\tif (p.path) {\n\t\t\tpath = new Path2D(p.path); // Create path from provided path data\n\t\t} else if (p.circle) {\n\t\t\tlet c = p.circle;\n\t\t\tpath = new Path2D();\n\t\t\tpath.arc(c.cx, c.cy, c.r, TWO_PI); // Create circle\n\t\t}\n\n\t\tif (path) {\n\t\t\tlet shape = { path };\n\n\t\t\t// Assign fill or stroke if defined\n\t\t\tif (p.fill) shape.fs = p.fill;\n\t\t\tif (p.stroke) {\n\t\t\t\tshape.st = p.stroke;\n\t\t\t\tif (p.strokeWidth) shape.stw = p.strokeWidth;\n\t\t\t}\n\t\t\tshapes.push(shape); // Add the shape to the array\n\t\t}\n\t});\n\n\treturn shapes;\n};",
          "syntax": "js"
        },
        {
          "p": "Then, I drew these paths and applied the necessary colors and styles."
        },
        {
          "code": "export const drawShape = (ctx, shapes) => {\n\t// Loop through each shape and apply fill/stroke\n\tfor (const shape of shapes) {\n\t\t// Assign fill color\n\t\tlet fillStyle = shape.fs;  // Only simple fill color\n\n\t\t// Apply fill if a fill color is set\n\t\tif (fillStyle) {\n\t\t\tctx.fillStyle = fillStyle;\n\t\t\tctx.fill(shape.path);\n\t\t}\n\n\t\t// Assign stroke color and line width\n\t\tlet strokeStyle = shape.st;  // Only simple stroke color\n\n\t\tif (strokeStyle) {\n\t\t\tctx.strokeStyle = strokeStyle;\n\t\t\tctx.lineWidth = shape.stw || 1;  // Default stroke width is 1 if not defined\n\t\t\tctx.stroke(shape.path);\n\t\t}\n\t}\n};",
          "syntax": "js"
        },
 
        {
          "p": "For animating these objects, Canvas transformation methods Can be used:"
        },
        {
          "code": "ctx.save();\nctx.translate(this.x, this.y);\nctx.rotate(angle);\nctx.scale(3, 3);\nctx.shadowColor = \"purple\";\nctx.shadowBlur = 20;\ndrawShape(ctx, shape);\nctx.restore();",
          "syntax": "js"
        },
        {
          "p": "Path2D() also caches the shapes, which means the canvas does not recalculate them on each draw. So that’s another plus."
        }
      ]
    },
    {
      "title": "Finalizing",
      "content": [
        {
          "p": "Well, doing all of this took a week, then two more weeks to actually build the game. It wouldn’t have taken so much time if I hadn’t refined and optimized everything as much as possible. Even now, I want to go back and fix some things that I don’t like or think could be written in a better way."
        },
        {
          "p": "The game itself, which you should have already seen on the homepage, is entirely drawn using SVG shapes or procedural generation. The SVG parser is available on GitHub at this link, and I think I will improve and add some features to it in the future."
        }
      ]
    }
  ]
}
